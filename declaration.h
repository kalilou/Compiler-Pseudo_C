#ifndef DECLARATION_H
#define DECLARATION_H
#include "analyseur.h"
#include "type.h"
#include "error.h"
#define Malloc(type) (type *)malloc(sizeof(type))

//////////////////////////////////////////////  PROTOTYPE YYLESS /////////////////////////////////////////////////////
void yyless(char *token);

//////////////////////////////////////////////  PROTOTYPES PREPROCESSEURS /////////////////////////////////////////////////////

boolean liste_preproc();
boolean liste_preprocaux();
boolean preproc();
boolean preprocaux();

//////////////////////////////////////////////  PROTOTYPES DECLARATION /////////////////////////////////////////////////////

boolean liste_decl();
boolean liste_declaux();
boolean decl();
boolean declaux();

//////////////////////////////////////////////  PROTOTYPES FONCTION /////////////////////////////////////////////////////

boolean liste_fonct();
boolean liste_fonctaux();
boolean fonct();
boolean retouraux();
boolean retour();

//////////////////////////////////////////////  PROTOTYPES PARAMETRE /////////////////////////////////////////////////////

boolean suite_param();
boolean liste_param();
boolean liste_paramaux();
boolean param();
boolean paramaux();
boolean paramaux1();
boolean paramaux2();

//////////////////////////////////////////////  PROTOTYPES INSTRUCTION /////////////////////////////////////////////////////

boolean liste_inst();
boolean liste_instaux();
boolean inst();
boolean liste_idf();
boolean liste_idfaux();
boolean printfaux();


//////////////////////////////////////////////  PROTOTYPE CORPS /////////////////////////////////////////////////////

boolean corps();
boolean ifaux();

//////////////////////////////////////////////  PROTOTYPE CONDITON /////////////////////////////////////////////////////

boolean liste_cond();
boolean condaux();
boolean cond();
boolean logiq();
boolean liste_condaux();

//////////////////////////////////////////////  PROTOTYPE EXPRESSION /////////////////////////////////////////////////////

boolean addsub();
boolean addsubaux();
boolean mult();
boolean multaux();
boolean aux();

//////////////////////////////////////////////  PROTOTYPE CONSTANTE /////////////////////////////////////////////////////

boolean Const();

//////////////////////////////////////////////  PROTOTYPE TYPE /////////////////////////////////////////////////////

boolean type();

//////////////////////////////////////////////  PROTOTYPE ENTETE /////////////////////////////////////////////////////

boolean entete();

//////////////////////////////////////////////  PROTOTYPE LIRE_TOKEN/////////////////////////////////////////////////////

typetoken lire_token();

//////////////////////////////////////////////  VARIABLE GLOBALE /////////////////////////////////////////////////////

boolean notread_token;

//void set_idf_attributes(char *name, int linenumber);
//void set_number_attributes(int value);


#endif

